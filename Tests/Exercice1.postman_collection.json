{
	"info": {
		"_postman_id": "393f312a-9e7d-426c-97a7-919f49b32912",
		"name": "Exercice 1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Requête 1a",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//pm.test(\"Response time is less than 2000ms\", function () {\r",
							"//    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
							"//});\r",
							"\r",
							"//déclaration de la variable jsonData :\r",
							"const jsonData = pm.response.json();\r",
							"// Assertion du nombre de blocs \"data\" :\r",
							"pm.test(\"Le nombre de blocs data est de 3\", function(){\r",
							"    pm.expect(jsonData.count).to.be.eq(3)\r",
							"});\r",
							"// Assertion de la version de l'API :\r",
							"pm.test(\"Contrôle version API\", function(){\r",
							"    pm.expect(jsonData.api_version).to.be.eq(\"1.1.0\")\r",
							"});\r",
							"// Assertion de la première coordonnée x :\r",
							"pm.test(\"Check Première coordonnee_x\", function(){\r",
							"    pm.expect(jsonData.data[0].coordonnee_x).to.be.eq(654601.0)\r",
							"});\r",
							"// Assertion de la première localisation précise :\r",
							"pm.test(\"Check Première Localisation précise\", function(){\r",
							"    pm.expect(jsonData.data[0].localisation_precise).to.be.eq(\"PONT DE TOLBIAC\")\r",
							"});\r",
							"// Assertion de la seconde localisation précise :\r",
							"pm.test(\"Check Seconde Localisation précise\", function(){\r",
							"    pm.expect(jsonData.data[1].localisation_precise).to.be.eq(\"PONT DE SOLFERINO\")\r",
							"});\r",
							"// Assertion de la troisième localisation précise :\r",
							"pm.test(\"Check Troisième Localisation précise\", function(){\r",
							"    pm.expect(jsonData.data[2].localisation_precise).to.be.eq(\"PONT DU GARIGLIANO\")\r",
							"});\r",
							"// Assertion du libellé de la première station :\r",
							"pm.test(\"Check Libellé station 1\", function(){\r",
							"    pm.expect(jsonData.data[0].libelle_station).to.be.eq(\"LA SEINE A PARIS-12E--ARRONDISSEMENT 1\")\r",
							"});\r",
							"//  Assertion du libellé de la seconde station :\r",
							"pm.test(\"Check Libellé station 2\", function(){\r",
							"    pm.expect(jsonData.data[1].libelle_station).to.be.eq(\"LA SEINE A PARIS--7E--ARRONDISSEMENT 1\")\r",
							"});\r",
							"//  Assertion du libellé de la troisième station :\r",
							"pm.test(\"Check Libellé station 3\", function(){\r",
							"    pm.expect(jsonData.data[2].libelle_station).to.be.eq(\"LA SEINE A PARIS-16E--ARRONDISSEMENT 2\")\r",
							"});\r",
							"// Assertion de la date de création :\r",
							"pm.test(\"Vérification Date de création\", function(){\r",
							"    pm.expect(jsonData.data[0].date_creation).to.be.eq(\"1971-01-01\")\r",
							"});\r",
							"// Assertion du libellé du nom du bassin :\r",
							"pm.test(\"Le libellé du bassin\", function(){\r",
							"    pm.expect(jsonData.data[0].nom_bassin).to.be.eq(\"La Seine et les cours d'eau côtiers normands\")\r",
							"});\r",
							"// Assertion du libellé du code_eu_bassin :\r",
							"pm.test(\"Le libellé du bassin\", function(){\r",
							"    pm.expect(jsonData.data[0].code_eu_bassin).to.be.eq(\"FRH\")\r",
							"});\r",
							"// Assertion du libellé région :\r",
							"pm.test(\"Le libellé de la région\", function(){\r",
							"    pm.expect(jsonData.data[0].libelle_region).to.be.eq(\"ILE-DE-FRANCE\")\r",
							"});\r",
							"// Assertion du libellé de code masse d'eau de la 1ère station :\r",
							"pm.test(\"Code masse d'eau 1ère station\", function(){\r",
							"    pm.expect(jsonData.data[0].code_masse_deau).to.be.eq(\"HR155A\")\r",
							"});\r",
							"// Assertion du libellé de code masse d'eau de la 2nde station :\r",
							"pm.test(\"Code masse d'eau 2nde station\", function(){\r",
							"    pm.expect(jsonData.data[1].code_masse_deau).to.be.eq(\"HR155A\")\r",
							"});\r",
							"// Assertion du libellé de code masse d'eau de la 3ème station :\r",
							"pm.test(\"Code masse d'eau 3ème station\", function(){\r",
							"    pm.expect(jsonData.data[2].code_masse_deau).to.be.eq(\"HR155A\")\r",
							"});\r",
							"// Assertion du libellé du code bassin :\r",
							"pm.test(\"Le code bassin\", function(){\r",
							"    pm.expect(jsonData.data[0].code_bassin).to.be.eq(\"H\")\r",
							"});\r",
							"// Assertion du libellé du code projection :\r",
							"pm.test(\"Le code projection\", function(){\r",
							"    pm.expect(jsonData.data[0].code_projection).to.be.eq(\"26\")\r",
							"});\r",
							"// Assertion du libellé du coordonnee_y :\r",
							"pm.test(\"coordonnee_y\", function(){\r",
							"    pm.expect(jsonData.data[0].coordonnee_y).to.be.eq(6859348.0)\r",
							"});\r",
							"// Assertion du libellé du coordonnee_x :\r",
							"pm.test(\"coordonnee_x\", function(){\r",
							"    pm.expect(jsonData.data[0].coordonnee_x).to.be.eq(654601.0)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://hubeau.eaufrance.fr/api/v1/qualite_rivieres/station_pc?nom_cours_eau=Seine&code_departement=75",
					"protocol": "https",
					"host": [
						"hubeau",
						"eaufrance",
						"fr"
					],
					"path": [
						"api",
						"v1",
						"qualite_rivieres",
						"station_pc"
					],
					"query": [
						{
							"key": "nom_cours_eau",
							"value": "Seine"
						},
						{
							"key": "code_departement",
							"value": "75"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Requête 1b",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Création d'une variable globale pour le code département :",
							"pm.sendRequest({",
							"    url: \"https://\" + pm.environment.get(\"url\") + \"/api/v1/qualite_rivieres/station_pc?nom_cours_eau=\" + pm.variables.get(\"nom_cours_eau\"),",
							"    method: \"GET\",",
							"    header: {},",
							"    body: {}",
							"},",
							"function (err,response) {",
							"    var jsonData = response.json();",
							"    // Déclaration du tableau, initialisé à vide :",
							"    var codes_departement = [];",
							"    // Alimentation du tableau, avec les 2 premiers codes départements présents dans les 2 premières itérations :",
							"    codes_departement.push(jsonData.data[0].code_departement);",
							"    codes_departement.push(jsonData.data[1].code_departement);",
							"    pm.globals.set(\"code_departement_init\",codes_departement);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Test du code retour 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"La réponse est correcte pour continuer les tests\", function () {",
							"    pm.response.to.not.be.error;",
							"    pm.response.to.not.have.jsonBody(\"error\");",
							"});",
							"//déclaration de la variable jsonData :",
							"const jsonData = pm.response.json();",
							"// Assertion du département :",
							"pm.test(\"Le département remonté est bien présent dans le csv : \" + pm.globals.get(\"code_departement_init\"), function(){",
							"    pm.expect(jsonData.data[0].code_departement).to.be.oneOf(pm.globals.get(\"code_departement_init\"));",
							"});",
							"/* Assertion du nom du cours d'eau : on vérifie que dans le json obtenu, le département présent est bien parmi ceux présents ",
							" dans le tableau. */",
							"pm.test(\"Le cours d'eau est \" + pm.variables.get(\"nom_cours_eau\"), function(){",
							"    pm.expect(jsonData.data[0].nom_cours_eau).to.be.eq(pm.variables.get(\"nom_cours_eau\"));",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://hubeau.eaufrance.fr/api/v1/qualite_rivieres/station_pc?code_departement=75&nom_cours_eau=Seine",
					"protocol": "https",
					"host": [
						"hubeau",
						"eaufrance",
						"fr"
					],
					"path": [
						"api",
						"v1",
						"qualite_rivieres",
						"station_pc"
					],
					"query": [
						{
							"key": "code_departement",
							"value": "75"
						},
						{
							"key": "nom_cours_eau",
							"value": "Seine"
						}
					]
				}
			},
			"response": []
		}
	]
}
